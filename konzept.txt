///User Registration
1. User can choose "Username" and "Password" (with restrictions like minimum length of 8)
2. Generate automatically RSA Public Key ("UserPubKey") and Private Key ("UserPrivKey") --- KeyPairGenerator("RSA")
3. Store the "UserPubKey" in the public storage of the keychain ("KeychainUserPubKey")
4. Store the "Username" in the public storage of the keychain ("KeychainUsername")
5. Generate SHA512-Hash from Username and Password ("HashUsernamePassword")
6. Use the first 16 Bytes (= 128 bits) from "HashUsernamePassword" to encrypt "UserPrivKey" with AES (results in "EncryptedUserPrivKey")
7. Store the "EncryptedUserPrivKey" in the public storage of the keychain ("KeychainEncryptedUserPrivKey")
---
8. Do the necessary stuff to store the whole User in the keychain (and later in the keychain-file)

///Login
1. User has to pass "Username" and "Password"
2. The system checks in his keyfile if any keychain has a "KeychainUsername" called "Username"
	2a. Not found: Error message "Username OR Password wrong" and stop
3. Generate SHA512-Hash from Username and Password ("HashUsernamePassword")
4. Use the first 16 Bytes (= 128 bits) from "HashUsernamePassword" to decrypt "KeychainEncryptedUserPrivKey" (results in "UserPrivKey")
5. Generate random string ("RandomTestString") and encrypt it with the "KeychainUserPubKey" (results in "EncryptedRandomTestString")
6. Decrypt the "EncryptedRandomTestString" with the "UserPrivKey"
	6a. "EncryptedRandomTestString" does not equal "RandomTestString": Error message "Username OR Password wrong" and stop
---
7. Status: Logged in

///Key Generation
///Generating a key means to add a new AES key into your private keychain 
Prerequisites: User has to be logged in
1. TODO

///Container Usage - Open
Prerequisites: User has to be logged in
1. User selects with a dialog box the path of the container - maybe prefilter with *.crypt
2. Read the first 64 Byte (512 Bit) as "ContainerKeyHash"
3. Search for an AES key in your keychain, which SHA512 hash results in "ContainerKeyHash"
	3a. Not found: Error message "You have no key to open this Container" and stop
	3b. You get a pointer/reference to the AES key which opens the Container ("ContainerKey")
4. Read the next 4 Byte (32 Bit) as "HeaderLength"
---
Annotation: This design results in the rule, that the first 68 Bytes are not encrypted
---
5. Read the next "HeaderLength" Byte as "EncryptedHeader"
6. Decrypt the "EncryptedHeader" with the "ContainerKey" as "Header"
7. Deserialize the "Header" to an Object, in which you get the Filenames, their absolute positions and lengths in the Container
---
8. Status: Container is opened
---
Annotation: Do we need Lockfiles to disallow multiple writers?

///Container Usage - Extract File
Prerequisites: User has to be logged in, and has access to the Container
1. User selects with the UI which file(s) he wants to extract from the Container
2. User selects the directory in which the file(s) gets extracted
3. The part of the Container in which the single file(s) is/are encrypted (see information in "Header") get(s) decrypted with the "ContainerKey"
4. The decrypted file(s) get(s) stored into the selected directory
---
Annotation: Watch out for the AES Blocksize (16 Byte Blocks = 128 Bit)
	* All files begin at a multiple of 16 Byte (relative to the 68 unencrypted Bytes)
	* If a file size is not a multiple of 16 Byte, fill the last block with zeros (or dummy data)
		* Example: File ("file.txt", 1000 Byte) is first after Header, begins at relative position 0
			* File needs 63 AES blocks, but the last is only half filled -> fill with zeros
			* Save in Header: Filename: file.txt, Size: 1000 Byte, Offset: 0

///Container Usage - Import File
Prerequisites: User has to be logged in, and has access to the Container
1. User selects with a file dialog which file(s) he wants to import into the Container
2. The file(s) get(s) encrypted in 16 Byte Blocks and written to the end of the Container
3. The Container Header gets updated with the new Filename, their absolute positions and lengths
---
Annotation: Maybe we should ask the User if he wants to delete the original unencrypted file

///Container Usage - Delete File
///This task has no hashing or encrypting in it. There are no special features in it. No remarks from my side.

///Container Usage - Rename File
///This task has no hashing or encrypting in it. There are no special features in it. No remarks from my side.
